[build-system]
    build-backend = "setuptools.build_meta"
    requires      = ["setuptools-scm>=8.0", "setuptools>=60"]

[tool.setuptools_scm]

[tool.setuptools.packages.find]
include = ["esptest"]

[project]
    authors = [
        { name = "Chen Yudong", email = "chenyudong@espressif.com" },
    ]
    classifiers = [
        "Development Status :: 4 - Beta",
        "Intended Audience :: Developers",
        "Topic :: Software Development :: Testing",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
        "Programming Language :: Python :: 3.13",
    ]
    description = "ESP Test Utils"
    dynamic = ["version"]
    license = { file = "LICENSE" }
    name = "esp-test-utils"
    readme = "README.md"
    requires-python = ">=3.7"

    dependencies = [
        "psutil",
        "pyserial",
        "PyYAML",
        "pexpect",
        "pyusb",
        "packaging",
        "typing_extensions; python_version < '3.11'"
    ]

    [project.optional-dependencies]
        # Optional Features
        idfci = [
            "pyecharts",
            "python-gitlab",
            "minio",
        ]
        all = [
            "pyecharts",
            "python-gitlab",
            "minio",
            "esp-idf-monitor",
            "scapy",
        ]
        # Test & Dev & Doc
        ci-quality = [
            "pylint-gitlab~=2.0.0",
            "pylint-quotes~=0.2.3",
            "pylint==2.17.5"
        ]
        dev = [
            "commitizen~=3.10.1",
            "pip-tools~=7.3",
            "pytest-cov~=4.1.0",
            "pytest~=7.4.0"
        ]
        mypy = [
            "types-psutil",
            "types-PyYAML",
            "types-pyserial",
            "types-pexpect"
        ]
        doc = [
            "sphinx~=7.0",
            "sphinx_rtd_theme~=2.0",
        ]
        test = [
            "pytest-cov~=4.1",
            "pytest~=7.4"
        ]
        test-features = [
            "pyecharts"
        ]

    [project.scripts]
        esp-setatt = "esptest.scripts.set_att:main"
        esp-listports = "esptest.scripts.list_ports:main"
        esp-monitor = "esptest.scripts.monitor:main"
        esp-downbin = "esptest.scripts.downbin:main"
        esp-copybin = "esptest.tools.copy_bin:main"
        esp-pipcheck = "esptest.tools.pip_check:main"

    [project.urls]
        Homepage = "https://github.com/ydhub/esp-test-utils"
        # Documentation = "https://readthedocs.org"
        Repository = "https://github.com/ydhub/esp-test-utils.git"
        Issues = "https://github.com/ydhub/esp-test-utils/issues"
        Changelog = "https://github.com/ydhub/esp-test-utils/blob/main/CHANGELOG.md"

[tool.codespell]
    skip = 'tests/*'
    ignore-words-list = "ser"

[tool.pylint]
    [tool.pylint.MASTER]
        ignore-paths = ["tests/.*"] # Paths to ignore during linting
        max-args = 6
    [tool.pylint.'BASIC']
        variable-rgx = "[a-z_][a-z0-9_]{0,30}$" # Variable names must start with a lowercase letter or underscore, followed by any combination of lowercase letters, numbers, or underscores, with a total length of 1 to 30 characters.
    [tool.pylint.'MESSAGES CONTROL']
        disable = [
            "duplicate-code",                # R0801: Similar lines in %s files
            "fixme",                         # W0511: Used when TODO/FIXME is encountered
            "import-error",                  # E0401: Used when pylint has been unable to import a module
            "import-outside-toplevel",       # E0402: Imports should usually be on top of the module
            "logging-fstring-interpolation", # W1202: Use % formatting in logging functions and pass the % parameters as arguments
            "missing-class-docstring",       # C0115: Missing class docstring
            "missing-function-docstring",    # C0116: Missing function or method docstring
            "missing-module-docstring",      # C0114: Missing module docstring
            "no-name-in-module",             # W0611: Used when a name cannot be found in a module
            "too-few-public-methods",        # R0903: Too few public methods of class
            "too-many-branches",             # R0912: Too many branches
            "too-many-locals",               # R0914: Too many local variables
            "too-many-return-statements",    # R0911: Too many return statements
            "too-many-statements",           # R0915: Too many statements
            "ungrouped-imports",             # C0412: Imports should be grouped by packages
            "too-many-instance-attributes",  # R0902: Too many instance attributes
            "abstract-method",               # W0223
        ]
    [tool.pylint.'FORMAT']
        max-line-length = 120 # Specifies the maximum line length for pylint checks
    [tool.pylint.'DESIGN']
        max-parents = 15  # R0901: Too many ancestors (too-many-ancestors), default: 7

[tool.ruff]
    line-length    = 120                                                    # Specifies the maximum line length for ruff checks
    lint.select    = ['E', 'F', 'W']                                        # Types of issues ruff should check for
    lint.extend-select  = ["I"]                                                  # sort-imports
    target-version = "py311" # Specifies the target Python version for ruff checks

    [tool.ruff.format] # See formatter config options at https://docs.astral.sh/ruff/formatter
        quote-style = "single"

[tool.mypy]
    disallow_incomplete_defs = false                               # Disallows defining functions with incomplete type annotations
    disallow_untyped_defs    = true                                # Disallows defining functions without type annotations or with incomplete type annotations
    exclude                  = '^venv/'                            # Paths to ignore during type checking
    ignore_missing_imports   = true                                # Suppress error messages about imports that cannot be resolved
    python_version           = "3.11"                              # Specifies the Python version used to parse and check the target program
    warn_no_return           = true                                # Shows errors for missing return statements on some execution paths
    warn_return_any          = true                                # Shows a warning when returning a value with type Any from a function declared with a non- Any return type
    allow_redefinition       = true                                # allow a variable to be redefined with an unrelated type

[tool.commitizen]
    annotated_tag            = true
    bump_message             = "ci(bump-version): bump release version to v$new_version"
    name                     = "cz_customize"
    tag_format               = "v$version"
    update_changelog_on_bump = true
    version_provider         = "scm"
    [tool.commitizen.customize]
        # ignore_invalid_commits = true
        changelog_pattern = "^(?!Merge)"
        commit_parser = "(?P<message>(change|feat|fix|refactor|remove|revert|BREAKING CHANGE).*)?"
        bump_map = { "change" = "MINOR", "feat" = "MINOR", "fix" = "PATCH", "refactor" = "PATCH", "remove" = "PATCH", "revert" = "PATCH", "BREAKING CHANGE" = "MAJOR" }
        bump_pattern = "^(change|feat|fix|refactor|remove|revert)"
        change_type_order = [
            "change",
            "ci",
            "docs",
            "feat",
            "fix",
            "refactor",
            "remove",
            "revert",
        ]
        example = "change: this is a custom change type"
        message_template = "{% if scope %}{{change_type}}({{scope}}): {{message}}{% else %}{{change_type}}: {{message}}{% endif %}{% if body %}\n\n{{body}}{% endif %}{% if is_breaking_change %}\n\nBREAKING CHANGE{% endif %}{% if footer %}\n\n{{footer}}{% endif %}"
        schema = "<type>(<scope>): <summary>"
        schema_pattern = "^([a-z]+)(\\([\\w\\-\\.]+\\))?:\\s.*"

        [[tool.commitizen.customize.questions]]
            choices = [
                { value = "change", name = "change: A change made to the codebase." },
                { value = "ci", name = "ci: Changes to our CI configuration files and scripts." },
                { value = "docs", name = "docs: Documentation only changes." },
                { value = "feat", name = "feat: A new feature." },
                { value = "fix", name = "fix: A bug fix." },
                { value = "refactor", name = "refactor: A code change that neither fixes a bug nor adds a feature." },
                { value = "remove", name = "remove: Removing code or files." },
                { value = "revert", name = "revert: Revert to a commit." },
            ]
            message = "Select the TYPE of change you are committing"
            name = "change_type"
            type = "list"

        [[tool.commitizen.customize.questions]]
            message = "What is the SCOPE of this change (press enter to skip)?"
            name    = "scope"
            type    = "input"

        [[tool.commitizen.customize.questions]]
            message = "Describe the changes made (SUMMARY of commit message):"
            name    = "message"
            type    = "input"

        [[tool.commitizen.customize.questions]]
            message = "Provide additional contextual information - commit message BODY: (press [enter] to skip)"
            name    = "body"
            type    = "input"

        [[tool.commitizen.customize.questions]]
            default = false
            message = "Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer"
            name    = "is_breaking_change"
            type    = "confirm"

        [[tool.commitizen.customize.questions]]
            message = "Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip)"
            name    = "footer"
            type    = "input"

[tool.pytest.ini_options]
    addopts          = "-s --cov=esptest --cov-report=term"
    python_classes   = ["Test*"]
    python_files     = ["test_*.py"]
    python_functions = ["test_*"]
    testpaths        = ["tests"]
    markers          = ["target_test", "env"]
    log_cli_level    = "INFO"
    log_cli_format   = "%(asctime)s %(levelname)s %(message)s"
    log_cli_date_format = "%Y-%m-%d %H:%M:%S.%f"

[tool.coverage.run]
    omit = [
        "__*__.py",
        "*/tests/*"
    ]
